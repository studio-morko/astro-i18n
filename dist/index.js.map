{"version":3,"sources":["../src/lib/locale.ts"],"names":["config"],"mappings":"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","file":"index.js","sourcesContent":["import { Config, config } from \"@mannisto/astro-config\"\nimport type { I18nConfig, LocaleConfig } from \"../types.js\"\n\nexport { config }\n\nexport class LocaleError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = \"LocaleError\"\n    Error.captureStackTrace?.(this, LocaleError)\n  }\n}\n\n// Internal state\nconst cache: {\n  locale: string | null\n  config: I18nConfig | null\n} = {\n  locale: null,\n  config: null,\n}\n\n/**\n * Internal namespace for private functions\n */\nconst Private = {\n  /**\n   * Loads the configuration (lazy loaded and cached)\n   */\n  async loadConfig(): Promise<I18nConfig> {\n    if (cache.config) {\n      return cache.config\n    }\n\n    try {\n      const config = await Config.load()\n      if (!config.i18n) {\n        throw new LocaleError(\n          \"Config must export default with `i18n` settings: export default config({ i18n: { ... } }).\",\n        )\n      }\n\n      Private.validate(config.i18n)\n      cache.config = config.i18n\n      return cache.config!\n    } catch (error) {\n      if (error instanceof LocaleError) {\n        throw error\n      }\n      throw new LocaleError(\n        `Failed to load configuration: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n      )\n    }\n  },\n\n  /**\n   * Validates the i18n configuration\n   */\n  validate(i18nConfig: I18nConfig): void {\n    if (!i18nConfig) {\n      throw new LocaleError(\n        \"Config must export default with `i18n` settings: export default config({ i18n: { ... } }).\",\n      )\n    }\n\n    if (!i18nConfig.default) {\n      throw new LocaleError(\"Default locale missing. Add `default` to i18n config.\")\n    }\n\n    if (!Array.isArray(i18nConfig.locales) || i18nConfig.locales.length === 0) {\n      throw new LocaleError(\"No locales defined. Add at least one locale in `locales` array.\")\n    }\n\n    const codes = i18nConfig.locales.map((locale: LocaleConfig) => locale.code)\n\n    if (!codes.includes(i18nConfig.default)) {\n      throw new LocaleError(\n        `Default locale \"${i18nConfig.default}\" not in supported locales: ${codes.join(\", \")}.`,\n      )\n    }\n\n    // Validate each locale\n    for (const locale of i18nConfig.locales) {\n      // Locale must have a code\n      if (!locale.code || typeof locale.code !== \"string\") {\n        throw new LocaleError(\n          \"Invalid locale code. Each locale needs a `code` string (e.g., 'en', 'fi', 'en-US').\",\n        )\n      }\n\n      // Locale must have an endonym\n      if (!locale.endonym || typeof locale.endonym !== \"string\") {\n        throw new LocaleError(\n          \"Invalid locale endonym. Each locale needs an `endonym` string (e.g., 'English', 'Suomi').\",\n        )\n      }\n\n      // Locale must have a valid direction\n      if (!locale.dir || ![\"ltr\", \"rtl\"].includes(locale.dir)) {\n        throw new LocaleError(\"Invalid locale direction. Use 'ltr' or 'rtl'.\")\n      }\n    }\n\n    // Check for duplicate locale codes\n    const uniqueCodes = new Set(codes)\n    if (uniqueCodes.size !== codes.length) {\n      throw new LocaleError(\"Duplicate locale codes found. Each code must be unique.\")\n    }\n  },\n\n  /**\n   * Detects locale from the current path, localStorage, or browser preferences\n   * @returns The detected locale code\n   */\n  async detect(): Promise<string> {\n    const config = await Private.loadConfig()\n\n    // 1. Check if locale is in the current path\n    if (typeof window !== \"undefined\") {\n      const pathLocale = await Private.detectFromPath()\n      if (pathLocale) {\n        return pathLocale\n      }\n    }\n\n    // 2. Check localStorage for saved locale\n    if (typeof window !== \"undefined\" && window.localStorage) {\n      const savedLocale = window.localStorage.getItem(\"astro-i18n-locale\")\n      if (savedLocale && config.locales.map((l: LocaleConfig) => l.code).includes(savedLocale)) {\n        return savedLocale\n      }\n    }\n\n    // 3. Check browser navigator.languages\n    if (typeof window !== \"undefined\" && navigator.languages) {\n      const browserLocale = await Private.detectFromBrowser()\n      if (browserLocale) {\n        return browserLocale\n      }\n    }\n\n    // 4. Use default locale\n    return config.default\n  },\n\n  /**\n   * Detects locale from the current URL path\n   * @returns The detected locale code or null\n   */\n  async detectFromPath(): Promise<string | null> {\n    if (typeof window === \"undefined\") return null\n\n    const config = await Private.loadConfig()\n    const pathname = window.location.pathname\n    const pathSegments = pathname.split(\"/\").filter(Boolean)\n\n    if (pathSegments.length > 0) {\n      const firstSegment = pathSegments[0]\n      if (config.locales.map((l: LocaleConfig) => l.code).includes(firstSegment)) {\n        return firstSegment\n      }\n    }\n\n    return null\n  },\n\n  /**\n   * Detects locale from browser navigator.languages\n   * @returns The detected locale code or null\n   */\n  async detectFromBrowser(): Promise<string | null> {\n    if (typeof window === \"undefined\" || !navigator.languages) return null\n\n    const config = await Private.loadConfig()\n    const supportedLocales = config.locales.map((l: LocaleConfig) => l.code)\n\n    for (const browserLang of navigator.languages) {\n      // Try exact match first\n      if (supportedLocales.includes(browserLang)) {\n        return browserLang\n      }\n\n      // Try language code match (e.g., 'en-US' -> 'en')\n      const langCode = browserLang.split(\"-\")[0]\n      if (supportedLocales.includes(langCode)) {\n        return langCode\n      }\n    }\n\n    return null\n  },\n}\n\n/**\n * Locale namespace for managing internationalization\n */\nexport const Locale = {\n  /**\n   * Gets the default locale code\n   */\n  async default(): Promise<string> {\n    const config = await Private.loadConfig()\n    return config.default\n  },\n\n  /**\n   * Gets an array of supported locale codes\n   */\n  async supported(): Promise<string[]> {\n    const config = await Private.loadConfig()\n    return config.locales.map((locale: LocaleConfig) => locale.code)\n  },\n\n  /**\n   * Gets the current locale code\n   */\n  async current(): Promise<string> {\n    if (cache.locale === null) {\n      cache.locale = await Private.detect()\n    }\n    return cache.locale\n  },\n\n  /**\n   * Gets information about a specific locale\n   * @param locale - The locale code to get info for\n   * @returns The locale object or null if not found\n   */\n  async info(locale: string): Promise<LocaleConfig | null> {\n    const config = await Private.loadConfig()\n    return config.locales.find((l: LocaleConfig) => l.code === locale) || null\n  },\n\n  /**\n   * Sets the current locale and persists it to localStorage\n   * @param localeCode - The locale code to set\n   */\n  async set(localeCode: string): Promise<void> {\n    const config = await Private.loadConfig()\n    const supportedLocales = config.locales.map((l: LocaleConfig) => l.code)\n\n    if (!supportedLocales.includes(localeCode)) {\n      throw new LocaleError(\n        `Locale \"${localeCode}\" is not supported. Supported locales: ${supportedLocales.join(\", \")}`,\n      )\n    }\n\n    cache.locale = localeCode\n\n    // Persist to localStorage (client-side only)\n    if (typeof window !== \"undefined\" && window.localStorage) {\n      window.localStorage.setItem(\"astro-i18n-locale\", localeCode)\n    }\n  },\n\n  /**\n   * Generates a localized URL\n   * @param path - The base path\n   * @param locale - The locale to use (defaults to current locale)\n   * @returns The localized URL\n   */\n  async url(path: string, locale?: string): Promise<string> {\n    const targetLocale = locale || (await this.current())\n    const config = await Private.loadConfig()\n    const supportedLocales = config.locales.map((l: LocaleConfig) => l.code)\n\n    if (!supportedLocales.includes(targetLocale)) {\n      throw new LocaleError(\n        `Locale \"${targetLocale}\" is not supported. Supported locales: ${supportedLocales.join(\", \")}`,\n      )\n    }\n\n    // If it's the default locale, don't prefix the path\n    if (targetLocale === config.default) {\n      return path.startsWith(\"/\") ? path : `/${path}`\n    }\n\n    // For non-default locales, prefix with locale code\n    const cleanPath = path.startsWith(\"/\") ? path : `/${path}`\n    return `/${targetLocale}${cleanPath}`\n  },\n}\n\n// Function to reset internal state (for testing)\nexport function resetLocaleState(): void {\n  cache.locale = null\n  cache.config = null\n}\n"]}