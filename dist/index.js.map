{"version":3,"sources":["../src/integration.ts","../src/lib/locale.ts"],"names":["config"],"mappings":"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","file":"index.js","sourcesContent":["import fs from \"node:fs\"\nimport path from \"node:path\"\nimport type { AstroIntegration } from \"astro\"\nimport type { Configuration } from \"./types.js\"\n\nfunction validate(config: Configuration) {\n  // Validate enabled field\n  if (typeof config.enabled !== \"boolean\") {\n    throw new Error(`\"enabled\" must be a boolean`)\n  }\n\n  // If disabled, no further validation needed\n  if (!config.enabled) return\n\n  // Validate default locale\n  if (typeof config.default !== \"string\" || !config.default.trim()) {\n    throw new Error(`\"default\" must be a non-empty string`)\n  }\n\n  // Validate locales array\n  if (!Array.isArray(config.locales) || config.locales.length === 0) {\n    throw new Error(`\"locales\" must be a non-empty array`)\n  }\n\n  // Validate each locale in the array\n  for (const [index, locale] of config.locales.entries()) {\n    if (typeof locale.code !== \"string\" || !locale.code.trim()) {\n      throw new Error(`\"locales[${index}].code\" must be a non-empty string`)\n    }\n    if (typeof locale.name !== \"string\" || !locale.name.trim()) {\n      throw new Error(`\"locales[${index}].name\" must be a non-empty string`)\n    }\n    if (typeof locale.endonym !== \"string\" || !locale.endonym.trim()) {\n      throw new Error(`\"locales[${index}].endonym\" must be a non-empty string`)\n    }\n    if (locale.dir !== \"ltr\" && locale.dir !== \"rtl\") {\n      throw new Error(`\"locales[${index}].dir\" must be either \"ltr\" or \"rtl\"`)\n    }\n  }\n\n  // Validate default locale exists in locales\n  if (!config.locales.some((l) => l.code === config.default)) {\n    throw new Error(`\"default\" must be one of the supported locale codes`)\n  }\n\n  // Validate translations configuration if it exists\n  if (config.translations) {\n    // If translations.enabled is explicitly true, validate the path\n    if (config.translations.enabled === true) {\n      if (typeof config.translations.path !== \"string\" || !config.translations.path.trim()) {\n        throw new Error(\n          `\"translations.path\" must be a non-empty string when translations are enabled`,\n        )\n      }\n    }\n  }\n}\n\nfunction loadTranslations(config: Configuration): Record<string, Record<string, string>> {\n  const translations: Record<string, Record<string, string>> = {}\n\n  if (config.translations?.enabled && config.translations.path) {\n    for (const locale of config.locales) {\n      const tsPath = path.join(process.cwd(), config.translations.path, `${locale.code}.ts`)\n      const jsPath = path.join(process.cwd(), config.translations.path, `${locale.code}.js`)\n\n      let translationData: Record<string, string> = {}\n\n      if (fs.existsSync(tsPath)) {\n        try {\n          // Read file content and parse it safely\n          const content = fs.readFileSync(tsPath, \"utf8\")\n          // Extract the object content between export default and the end\n          const match = content.match(/export\\s+default\\s*(\\{[\\s\\S]*\\})\\s*;?\\s*$/)\n          if (match) {\n            // Parse the object content as JSON (after some cleanup)\n            const objectContent = match[1]\n              .replace(/(\\w+):/g, '\"$1\":') // Convert keys to quoted strings\n              .replace(/'/g, '\"') // Replace single quotes with double quotes\n            translationData = JSON.parse(objectContent)\n          } else {\n            throw new Error(`Invalid translation file format in ${tsPath}`)\n          }\n        } catch (error) {\n          throw new Error(`Failed to load translation file ${tsPath}: ${error}`)\n        }\n      } else if (fs.existsSync(jsPath)) {\n        try {\n          // Read file content and parse it safely\n          const content = fs.readFileSync(jsPath, \"utf8\")\n          // Extract the object content between export default and the end\n          const match = content.match(/export\\s+default\\s*(\\{[\\s\\S]*\\})\\s*;?\\s*$/)\n          if (match) {\n            // Parse the object content as JSON (after some cleanup)\n            const objectContent = match[1]\n              .replace(/(\\w+):/g, '\"$1\":') // Convert keys to quoted strings\n              .replace(/'/g, '\"') // Replace single quotes with double quotes\n            translationData = JSON.parse(objectContent)\n          } else {\n            throw new Error(`Invalid translation file format in ${jsPath}`)\n          }\n        } catch (error) {\n          throw new Error(`Failed to load translation file ${jsPath}: ${error}`)\n        }\n      } else {\n        throw new Error(\n          `Translation file not found for locale \"${locale.code}\" (tried ${locale.code}.ts and ${locale.code}.js)`,\n        )\n      }\n\n      translations[locale.code] = translationData\n    }\n  }\n\n  return translations\n}\n\nexport default function i18n(config: Configuration): AstroIntegration {\n  return {\n    name: \"@mannisto/astro-i18n\",\n    hooks: {\n      \"astro:config:setup\": ({ injectScript, logger }) => {\n        validate(config)\n\n        logger.info(`enabled: ${config.enabled}`)\n        if (config.enabled) {\n          logger.info(`default locale: ${config.default}`)\n          logger.info(`supported locales: ${config.locales.map((l) => l.code).join(\", \")}`)\n        }\n\n        // Load translations at build time if enabled\n        let translations: Record<string, Record<string, string>> = {}\n        if (config.translations?.enabled) {\n          try {\n            translations = loadTranslations(config)\n            logger.info(`loaded translations for ${Object.keys(translations).length} locales`)\n          } catch (error) {\n            logger.error(`Failed to load translations: ${error}`)\n            throw error\n          }\n        }\n\n        // Inject configuration and translations into global scope\n        const configScript = `globalThis.__ASTRO_I18N_CONFIG__ = ${JSON.stringify(config)};`\n        const translationsScript = `globalThis.__ASTRO_I18N_TRANSLATIONS__ = ${JSON.stringify(translations)};`\n\n        injectScript(\"page-ssr\", configScript + translationsScript)\n      },\n    },\n  }\n}\n","import type { Configuration, Locales } from \"../types\"\n\n// Global configuration injected by the Astro integration\ndeclare global {\n  var __ASTRO_I18N_CONFIG__: Configuration | undefined\n  var __ASTRO_I18N_TRANSLATIONS__: Record<string, Record<string, string>> | undefined\n}\n\nconst cache: {\n  i18n?: Configuration\n  translations: Record<string, Record<string, string>>\n} = { translations: {} }\n\nlet currentLocale: string = \"\"\n\nconst PREFIX = \"[@mannisto/astro-i18n]\"\n\n/**\n * Loads and validates the configuration file and\n * caches it for future use.\n *\n * @param directory : The root directory of the project,\n *                  defaults to the current working directory\n * @returns       : The configuration object\n */\nexport function config(): Configuration {\n  if (cache.i18n) return cache.i18n\n\n  // Get injected configuration from Astro integration\n  const injectedConfig = globalThis.__ASTRO_I18N_CONFIG__\n  if (injectedConfig) {\n    cache.i18n = injectedConfig\n    return injectedConfig\n  }\n\n  throw new Error(\n    `${PREFIX}: No i18n configuration found. Make sure to add the i18n integration to your astro.config.mjs`,\n  )\n}\n\n/**\n * Locale namespace functions\n */\nexport const Locale = {\n  /**\n   * Returns the enabled status of the i18n configuration\n   */\n  get enabled(): boolean {\n    return config().enabled\n  },\n\n  /**\n   * Returns the current locale\n   */\n  get current(): string {\n    return currentLocale || config().default\n  },\n\n  /**\n   * Returns the supported locales\n   */\n  get supported(): string[] {\n    return config().locales.map((l) => l.code)\n  },\n\n  /**\n   * Returns the default locale\n   */\n  get default(): string {\n    return config().default\n  },\n\n  /**\n   * Sets the current locale\n   */\n  set(locale: string): void {\n    currentLocale = locale\n  },\n\n  /**\n   * Returns the locale configuration for a given locale\n   */\n  info(locale?: string): Locales | undefined {\n    const code = locale || Locale.current\n    return config().locales.find((l) => l.code === code)\n  },\n\n  /**\n   * Returns the URL for a given pathname and locale\n   */\n  url(pathname: string = \"/\", locale?: string): string {\n    const code = locale || Locale.current\n    if (!pathname.startsWith(\"/\")) pathname = `/${pathname}`\n    return `/${code}${pathname}`\n  },\n\n  /**\n   * Replaces variable placeholders in a text string\n   * @param text - The text containing variable placeholders like {name}\n   * @param vars - Object containing variable values\n   * @returns The text with variables replaced\n   */\n  replace(text: string, vars: Record<string, string | number>): string {\n    let result = text\n    for (const [k, v] of Object.entries(vars)) {\n      result = result.replace(`{${k}}`, String(v))\n    }\n    return result\n  },\n\n  /**\n   * Returns the translations object for the current or specified locale.\n   * Uses translations loaded at build time and injected via global variables.\n   *\n   * @param locale - Optional locale code, defaults to current locale\n   * @returns The translations object (synchronous for static generation)\n   */\n  translations(locale?: string): Record<string, string> {\n    const cfg = config()\n    const code = locale || Locale.current\n\n    // If translations are disabled, return empty object\n    if (!cfg.translations?.enabled) {\n      return {}\n    }\n\n    // Get translations from injected global variable\n    const injectedTranslations = globalThis.__ASTRO_I18N_TRANSLATIONS__\n    if (injectedTranslations?.[code]) {\n      return injectedTranslations[code]\n    }\n\n    // Return empty object if no translations found\n    return {}\n  },\n}\n"]}