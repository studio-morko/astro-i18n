{"version":3,"sources":["../src/integration.ts","../src/lib/locale.ts"],"names":["config","PREFIX"],"mappings":"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","file":"index.js","sourcesContent":["import type { AstroIntegration } from \"astro\"\nimport type { Configuration } from \"./types.js\"\n\nconst PREFIX = \"[@mannisto/astro-i18n]\"\n\nfunction validate(config: Configuration) {\n  // Validate enabled field\n  if (typeof config.enabled !== \"boolean\") {\n    throw new Error(`${PREFIX}: \"enabled\" must be a boolean`)\n  }\n\n  // If disabled, no further validation needed\n  if (!config.enabled) return\n\n  // Validate default locale\n  if (typeof config.default !== \"string\" || !config.default.trim()) {\n    throw new Error(`${PREFIX}: \"default\" must be a non-empty string`)\n  }\n\n  // Validate locales array\n  if (!Array.isArray(config.locales) || config.locales.length === 0) {\n    throw new Error(`${PREFIX}: \"locales\" must be a non-empty array`)\n  }\n\n  // Validate each locale in the array\n  for (const [index, locale] of config.locales.entries()) {\n    if (typeof locale.code !== \"string\" || !locale.code.trim()) {\n      throw new Error(`${PREFIX}: \"locales[${index}].code\" must be a non-empty string`)\n    }\n    if (typeof locale.name !== \"string\" || !locale.name.trim()) {\n      throw new Error(`${PREFIX}: \"locales[${index}].name\" must be a non-empty string`)\n    }\n    if (typeof locale.endonym !== \"string\" || !locale.endonym.trim()) {\n      throw new Error(`${PREFIX}: \"locales[${index}].endonym\" must be a non-empty string`)\n    }\n    if (locale.dir !== \"ltr\" && locale.dir !== \"rtl\") {\n      throw new Error(`${PREFIX}: \"locales[${index}].dir\" must be either \"ltr\" or \"rtl\"`)\n    }\n  }\n\n  // Validate default locale exists in locales\n  if (!config.locales.some((l) => l.code === config.default)) {\n    throw new Error(`${PREFIX}: \"default\" must be one of the supported locale codes`)\n  }\n\n  // Validate translations configuration if it exists\n  if (config.translations) {\n    // If translations.enabled is explicitly true, validate the path\n    if (config.translations.enabled === true) {\n      if (typeof config.translations.path !== \"string\" || !config.translations.path.trim()) {\n        throw new Error(\n          `${PREFIX}: \"translations.path\" must be a non-empty string when translations are enabled`,\n        )\n      }\n    }\n  }\n}\n\nexport default function i18n(config: Configuration): AstroIntegration {\n  return {\n    name: \"@mannisto/astro-i18n\",\n    hooks: {\n      \"astro:config:setup\": ({ injectScript, logger }) => {\n        validate(config)\n\n        logger.info(`${PREFIX}: enabled: ${config.enabled}`)\n        if (config.enabled) {\n          logger.info(`${PREFIX}: default locale: ${config.default}`)\n          logger.info(\n            `${PREFIX}: supported locales: ${config.locales.map((l) => l.code).join(\", \")}`,\n          )\n        }\n\n        // Inject configuration into global scope\n        injectScript(\"page-ssr\", `globalThis.__ASTRO_I18N_CONFIG__ = ${JSON.stringify(config)};`)\n      },\n    },\n  }\n}\n","import fs from \"node:fs\"\nimport path from \"node:path\"\nimport type { Configuration, Locales } from \"../types\"\n\n// Global configuration injected by the Astro integration\ndeclare global {\n  var __ASTRO_I18N_CONFIG__: Configuration | undefined\n}\n\nconst cache: {\n  i18n?: Configuration\n  translations: Record<string, Record<string, string>>\n} = { translations: {} }\n\nlet currentLocale: string = \"\"\n\nconst PREFIX = \"[@mannisto/astro-i18n]\"\n\n/**\n * Loads and validates the configuration file and\n * caches it for future use.\n *\n * @param directory : The root directory of the project,\n *                  defaults to the current working directory\n * @returns       : The configuration object\n */\nexport function config(): Configuration {\n  if (cache.i18n) return cache.i18n\n\n  // Get injected configuration from Astro integration\n  const injectedConfig = globalThis.__ASTRO_I18N_CONFIG__\n  if (injectedConfig) {\n    cache.i18n = injectedConfig\n    return injectedConfig\n  }\n\n  throw new Error(\n    `${PREFIX}: No i18n configuration found. Make sure to add the i18n integration to your astro.config.mjs`,\n  )\n}\n\n/**\n * Locale namespace functions\n */\nexport const Locale = {\n  /**\n   * Returns the enabled status of the i18n configuration\n   */\n  get enabled(): boolean {\n    return config().enabled\n  },\n\n  /**\n   * Returns the current locale\n   */\n  get current(): string {\n    return currentLocale || config().default\n  },\n\n  /**\n   * Returns the supported locales\n   */\n  get supported(): string[] {\n    return config().locales.map((l) => l.code)\n  },\n\n  /**\n   * Returns the default locale\n   */\n  get default(): string {\n    return config().default\n  },\n\n  /**\n   * Sets the current locale\n   */\n  set(locale: string): void {\n    currentLocale = locale\n  },\n\n  /**\n   * Returns the locale configuration for a given locale\n   */\n  info(locale?: string): Locales | undefined {\n    const code = locale || Locale.current\n    return config().locales.find((l) => l.code === code)\n  },\n\n  /**\n   * Returns the URL for a given pathname and locale\n   */\n  url(pathname: string = \"/\", locale?: string): string {\n    const code = locale || Locale.current\n    if (!pathname.startsWith(\"/\")) pathname = `/${pathname}`\n    return `/${code}${pathname}`\n  },\n\n  /**\n   * Replaces variable placeholders in a text string\n   * @param text - The text containing variable placeholders like {name}\n   * @param vars - Object containing variable values\n   * @returns The text with variables replaced\n   */\n  replace(text: string, vars: Record<string, string | number>): string {\n    let result = text\n    for (const [k, v] of Object.entries(vars)) {\n      result = result.replace(`{${k}}`, String(v))\n    }\n    return result\n  },\n\n  /**\n   * Returns the translation for a given key, loading it from cache if available.\n   * If not in cache, loads it from disk, caches it, and then returns.\n   */\n  t(key: string, locale?: string): string {\n    const cfg = config()\n\n    // Start with the key as the base text\n    let text = key\n\n    // If translations are enabled and path is provided, try to load from translation files\n    if (cfg.translations?.enabled && cfg.translations.path) {\n      const code = locale || Locale.current\n\n      // Ensure translations object exists in cache\n      if (!cache.translations) {\n        cache.translations = {}\n      }\n\n      // Load into cache if not present\n      if (!cache.translations[code]) {\n        // Try .ts first, then .js\n        let translationsPath = path.join(process.cwd(), cfg.translations.path, `${code}.ts`)\n        if (!fs.existsSync(translationsPath)) {\n          translationsPath = path.join(process.cwd(), cfg.translations.path, `${code}.js`)\n          if (!fs.existsSync(translationsPath)) {\n            throw new Error(\n              `${PREFIX}: Missing translations file for locale \"${code}\" (tried ${code}.ts and ${code}.js)`,\n            )\n          }\n        }\n        cache.translations[code] = require(translationsPath).default\n      }\n\n      // Try to get translation from cache, fallback to key if not found\n      text = cache.translations[code]?.[key] ?? key\n    }\n\n    return text\n  },\n}\n"]}