{"version":3,"sources":["../src/lib/locale.ts"],"names":["config"],"mappings":"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","file":"index.js","sourcesContent":["import fs from \"node:fs\"\nimport path from \"node:path\"\nimport type { I18nConfig, LocaleConfig } from \"../types\"\n\nconst cache: {\n  i18n?: I18nConfig\n  translations: Record<string, Record<string, string>>\n} = { translations: {} }\n\nlet currentLocale: string = \"\"\n\nconst FILENAME = \"astro.mannisto.mjs\"\nconst PREFIX = \"[@mannisto/astro-i18n]\"\n\n/**\n * Loads and validates the configuration file and\n * caches it for future use.\n *\n * @param directory : The root directory of the project,\n *                  defaults to the current working directory\n * @returns       : The configuration object\n */\nexport function config(directory: string = process.cwd()): I18nConfig {\n  if (cache.i18n) return cache.i18n\n\n  const configPath = path.join(directory, FILENAME)\n\n  if (!fs.existsSync(configPath)) {\n    throw new Error(`${FILENAME} configuration file not found: ${configPath}`)\n  }\n\n  let config: { i18n?: I18nConfig }\n\n  try {\n    config = require(configPath).default\n  } catch (err) {\n    throw new Error(`${PREFIX}: Failed to load ${FILENAME} config file: ${err}`)\n  }\n\n  // Check that the i18n object is an object\n  if (!config.i18n || typeof config.i18n !== \"object\") {\n    throw new Error(`${PREFIX}: \"i18n\" object is missing in ${FILENAME} configuration`)\n  }\n\n  // Get the i18n object from the user config\n  const i18n = config.i18n as I18nConfig\n\n  // Check that enabled is a boolean\n  if (typeof i18n.enabled !== \"boolean\") {\n    throw new Error(`${PREFIX}: \"i18n.enabled\" must be true or false`)\n  }\n\n  // Check that locales is an array and is not empty\n  if (!Array.isArray(i18n.locales) || i18n.locales.length === 0) {\n    throw new Error(`${PREFIX}: \"i18n.locales\" must be a non-empty array`)\n  }\n\n  // Check that all locales are valid\n  // 1. Check if the locale code is a non-empty string\n  // 2. Check if the locale name is a non-empty string\n  // 3. Check if the locale endonym is a non-empty string\n  // 4. Check if the locale dir is \"ltr\" or \"rtl\"\n  for (const loc of i18n.locales) {\n    if (typeof loc.code !== \"string\" || !loc.code.trim()) {\n      throw new Error(`${PREFIX}: Locale is missing a valid \"code\"`)\n    }\n    if (typeof loc.name !== \"string\" || !loc.name.trim()) {\n      throw new Error(`${PREFIX}: Locale \"${loc.code}\" is missing a valid \"name\"`)\n    }\n    if (typeof loc.endonym !== \"string\" || !loc.endonym.trim()) {\n      throw new Error(`${PREFIX}: Locale \"${loc.code}\" is missing a valid \"endonym\"`)\n    }\n    if (![\"ltr\", \"rtl\"].includes(loc.dir)) {\n      throw new Error(`${PREFIX}: Locale \"${loc.code}\" must have \"dir\" set to \"ltr\" or \"rtl\"`)\n    }\n  }\n\n  // Check that default locale is one of the supported locales\n  if (!i18n.default || !i18n.locales.some((l) => l.code === i18n.default)) {\n    throw new Error(`${PREFIX}: \"i18n.default\" must be one of the supported locale codes`)\n  }\n\n  // If translations are enabled, check if the translations object is valid\n  if (i18n.translations) {\n    if (typeof i18n.translations !== \"object\") {\n      throw new Error(`${PREFIX}: \"i18n.translations\" must be an object`)\n    }\n    if (typeof i18n.translations.enabled !== \"boolean\") {\n      throw new Error(`${PREFIX}: \"i18n.translations.enabled\" must be true or false`)\n    }\n    if (typeof i18n.translations.path !== \"string\" || !i18n.translations.path.trim()) {\n      throw new Error(`${PREFIX}: \"i18n.translations.path\" must be a non-empty string`)\n    }\n    if (i18n.translations.enabled) {\n      for (const loc of i18n.locales) {\n        const tsFile = path.join(directory, i18n.translations.path, `${loc.code}.ts`)\n        const jsFile = path.join(directory, i18n.translations.path, `${loc.code}.js`)\n        if (!fs.existsSync(tsFile) && !fs.existsSync(jsFile)) {\n          throw new Error(\n            `${PREFIX}: Missing translations file for locale \"${loc.code}\" (tried ${loc.code}.ts and ${loc.code}.js)`,\n          )\n        }\n      }\n    }\n  }\n\n  cache.i18n = i18n\n  return cache.i18n\n}\n\n/**\n * Locale namespace functions\n */\nexport const Locale = {\n  /**\n   * Returns the enabled status of the i18n configuration\n   */\n  get enabled(): boolean {\n    return config().enabled\n  },\n\n  /**\n   * Returns the current locale\n   */\n  get current(): string {\n    return currentLocale || config().default\n  },\n\n  /**\n   * Returns the supported locales\n   */\n  get supported(): string[] {\n    return config().locales.map((l) => l.code)\n  },\n\n  /**\n   * Returns the default locale\n   */\n  get default(): string {\n    return config().default\n  },\n\n  /**\n   * Sets the current locale\n   */\n  set(locale: string): void {\n    currentLocale = locale\n  },\n\n  /**\n   * Returns the locale configuration for a given locale\n   */\n  info(locale?: string): LocaleConfig | undefined {\n    const code = locale || Locale.current\n    return config().locales.find((l) => l.code === code)\n  },\n\n  /**\n   * Returns the URL for a given pathname and locale\n   */\n  url(pathname: string = \"/\", locale?: string): string {\n    const code = locale || Locale.current\n    if (!pathname.startsWith(\"/\")) pathname = `/${pathname}`\n    return `/${code}${pathname}`\n  },\n\n  /**\n   * Returns the translation for a given key, loading it from cache if available.\n   * If not in cache, loads it from disk, caches it, and then returns.\n   */\n  t(key: string, locale?: string, vars?: Record<string, string | number>): string {\n    const cfg = config()\n    if (!cfg.translations?.enabled) return key\n\n    const code = locale || Locale.current\n\n    // Ensure translations object exists in cache\n    if (!cache.translations) {\n      cache.translations = {}\n    }\n\n    // Load into cache if not present\n    if (!cache.translations[code]) {\n      // Try .ts first, then .js\n      let translationsPath = path.join(process.cwd(), cfg.translations!.path, `${code}.ts`)\n      if (!fs.existsSync(translationsPath)) {\n        translationsPath = path.join(process.cwd(), cfg.translations!.path, `${code}.js`)\n        if (!fs.existsSync(translationsPath)) {\n          throw new Error(\n            `${PREFIX}: Missing translations file for locale \"${code}\" (tried ${code}.ts and ${code}.js)`,\n          )\n        }\n      }\n      cache.translations[code] = require(translationsPath).default\n    }\n\n    // Safely read the translation\n    let text = cache.translations[code]?.[key] ?? key\n\n    // Replace variable placeholders\n    if (vars) {\n      for (const [k, v] of Object.entries(vars)) {\n        text = text.replace(`{${k}}`, String(v))\n      }\n    }\n    return text\n  },\n}\n"]}